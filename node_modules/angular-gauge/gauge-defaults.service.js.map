{"version":3,"sources":["../src/gauge-defaults.service.ts"],"names":[],"mappings":"AAqEA;IAAA;QAEE;;WAEG;QACH,mBAAc,GAAW,GAAG,CAAC;QAE7B;;WAEG;QACH,iBAAY,GAAW,EAAE,CAAC;QAE1B;;WAEG;QACH,WAAM,GAAW,GAAG,CAAC;QAErB;;WAEG;QACH,QAAG,GAAW,GAAG,CAAC;QAOlB;;WAEG;QACH,cAAS,GAAY,IAAI,CAAC;QAE1B;;WAEG;QACH,eAAU,GAAW,OAAO,CAAC;QAE7B;;WAEG;QACH,cAAS,GAAW,MAAM,CAAC;QAE3B;;WAEG;QACH,mBAAc,GAAW,OAAO,CAAC;QAEjC;;WAEG;QACH,mBAAc,GAAW,YAAY,CAAC;QAOtC;;WAEG;QACH,aAAQ,GAAY,KAAK,CAAC;IAO5B,CAAC;IAAD,oBAAC;AAAD,CAnEA,AAmEC,IAAA","file":"gauge-defaults.service.js","sourceRoot":"","sourcesContent":["export interface GaugeOptions {\n\n  /**\n   * The angle in degrees to start the dial\n   */\n  dialStartAngle?: number;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  dialEndAngle?: number;\n\n  /**\n   * The radius of the gauge\n   */\n  radius?: number;\n\n  /**\n   * The maximum value for the gauge\n   */\n  max?: number;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  label?: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  showValue?: boolean;\n\n  /**\n   * The CSS class of the gauge\n   */\n  gaugeClass?: string;\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  dialClass?: string;\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  valueDialClass?: string;\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  valueTextClass?: string;\n\n  /**\n   * The value of the gauge\n   */\n  value?: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  animated?: boolean;\n\n  /**\n   * Animation duration in seconds\n   */\n  animationDuration?: number;\n\n}\n\nexport class GaugeDefaults implements GaugeOptions {\n\n  /**\n   * The angle in degrees to start the dial\n   */\n  dialStartAngle: number = 135;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  dialEndAngle: number = 45;\n\n  /**\n   * The radius of the gauge\n   */\n  radius: number = 400;\n\n  /**\n   * The maximum value for the gauge\n   */\n  max: number = 100;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  label: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  showValue: boolean = true;\n\n  /**\n   * The CSS class of the gauge\n   */\n  gaugeClass: string = 'gauge';\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  dialClass: string = 'dial';\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  valueDialClass: string = 'value';\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  valueTextClass: string = 'value-text';\n\n  /**\n   * The value of the gauge\n   */\n  value: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  animated: boolean = false;\n\n  /**\n   * Animation duration in seconds\n   */\n  animationDuration: number;\n\n}"]}