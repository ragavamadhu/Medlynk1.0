import { Component, ElementRef, Input, Output, EventEmitter } from '@angular/core';
import * as Gauge from 'svg-gauge';
import { GaugeDefaults } from './gauge-defaults.service';
var GaugeComponent = (function () {
    function GaugeComponent(elm, defaults) {
        this.elm = elm;
        this.defaults = defaults;
        /**
         * Called when the gauge is created
         */
        this.gaugeCreated = new EventEmitter();
    }
    GaugeComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var options = {
            dialStartAngle: this.dialStartAngle,
            dialEndAngle: this.dialEndAngle,
            radius: this.radius,
            max: this.max,
            label: this.label,
            showValue: this.showValue,
            gaugeClass: this.gaugeClass,
            dialClass: this.dialClass,
            valueDialClass: this.valueDialClass,
            valueTextClass: this.valueTextClass,
            value: this.value
        };
        Object.keys(this.defaults).forEach(function (optionKey) {
            if (typeof options[optionKey] === 'undefined') {
                options[optionKey] = _this.defaults[optionKey];
            }
        });
        this.gauge = Gauge(this.elm.nativeElement, options);
        this.gaugeCreated.emit({ gauge: this.gauge });
        this.updateValue();
    };
    GaugeComponent.prototype.ngOnChanges = function (changes) {
        if (changes['value']) {
            this.updateValue();
        }
    };
    GaugeComponent.prototype.updateValue = function () {
        if (this.gauge) {
            if (this.animated) {
                this.gauge.setValueAnimated(this.value, this.animationDuration);
            }
            else {
                this.gauge.setValue(this.value);
            }
        }
    };
    return GaugeComponent;
}());
export { GaugeComponent };
GaugeComponent.decorators = [
    { type: Component, args: [{
                selector: 'mwl-gauge',
                template: ''
            },] },
];
/** @nocollapse */
GaugeComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: GaugeDefaults, },
]; };
GaugeComponent.propDecorators = {
    'dialStartAngle': [{ type: Input },],
    'dialEndAngle': [{ type: Input },],
    'radius': [{ type: Input },],
    'max': [{ type: Input },],
    'label': [{ type: Input },],
    'showValue': [{ type: Input },],
    'gaugeClass': [{ type: Input },],
    'dialClass': [{ type: Input },],
    'valueDialClass': [{ type: Input },],
    'valueTextClass': [{ type: Input },],
    'value': [{ type: Input },],
    'animated': [{ type: Input },],
    'animationDuration': [{ type: Input },],
    'gaugeCreated': [{ type: Output },],
};
//# sourceMappingURL=gauge.component.js.map