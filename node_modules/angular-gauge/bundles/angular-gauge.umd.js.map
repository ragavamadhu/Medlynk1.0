{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap aa4ccddeebd3b5aabd29","webpack:///./src/gauge-defaults.service.ts","webpack:///external {\"root\":[\"ng\",\"core\"],\"commonjs\":\"@angular/core\",\"commonjs2\":\"@angular/core\",\"amd\":\"@angular/core\"}","webpack:///./src/gauge.module.ts","webpack:///./src/gauge.component.ts","webpack:///./src/index.ts","webpack:///./~/svg-gauge/index.js","webpack:///./~/svg-gauge/src/gauge.js"],"names":[],"mappings":"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,iBAAU,EAAoB,sCAAa;GA1EzD,cAAc,CAyH1B;AAzHY,wCAAc;;;;;;;;;;;;;ACR3B,iCAA+B;;;;;;;ACA/B;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA,kDAAuB,cAAc;AAAA;AACrC,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,OAAO;AACzB,kBAAkB,OAAO;AACzB,sBAAsB,OAAO;AAC7B,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,uCAAuC,gDAAgD;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC","file":"angular-gauge.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@angular/core\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angularGauge\"] = factory(require(\"@angular/core\"));\n\telse\n\t\troot[\"angularGauge\"] = factory(root[\"ng\"][\"core\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap aa4ccddeebd3b5aabd29","export interface GaugeOptions {\n\n  /**\n   * The angle in degrees to start the dial\n   */\n  dialStartAngle?: number;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  dialEndAngle?: number;\n\n  /**\n   * The radius of the gauge\n   */\n  radius?: number;\n\n  /**\n   * The maximum value for the gauge\n   */\n  max?: number;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  label?: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  showValue?: boolean;\n\n  /**\n   * The CSS class of the gauge\n   */\n  gaugeClass?: string;\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  dialClass?: string;\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  valueDialClass?: string;\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  valueTextClass?: string;\n\n  /**\n   * The value of the gauge\n   */\n  value?: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  animated?: boolean;\n\n  /**\n   * Animation duration in seconds\n   */\n  animationDuration?: number;\n\n}\n\nexport class GaugeDefaults implements GaugeOptions {\n\n  /**\n   * The angle in degrees to start the dial\n   */\n  dialStartAngle: number = 135;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  dialEndAngle: number = 45;\n\n  /**\n   * The radius of the gauge\n   */\n  radius: number = 400;\n\n  /**\n   * The maximum value for the gauge\n   */\n  max: number = 100;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  label: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  showValue: boolean = true;\n\n  /**\n   * The CSS class of the gauge\n   */\n  gaugeClass: string = 'gauge';\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  dialClass: string = 'dial';\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  valueDialClass: string = 'value';\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  valueTextClass: string = 'value-text';\n\n  /**\n   * The value of the gauge\n   */\n  value: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  animated: boolean = false;\n\n  /**\n   * Animation duration in seconds\n   */\n  animationDuration: number;\n\n}\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader?emitErrors=true&failOnHint=true!./src/gauge-defaults.service.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":[\"ng\",\"core\"],\"commonjs\":\"@angular/core\",\"commonjs2\":\"@angular/core\",\"amd\":\"@angular/core\"}\n// module id = 1\n// module chunks = 0 1","import { NgModule, InjectionToken, ModuleWithProviders } from '@angular/core';\nimport { GaugeComponent } from './gauge.component';\nimport { GaugeDefaults, GaugeOptions } from './gauge-defaults.service';\n\nexport const USER_DEFAULTS: InjectionToken<string> = new InjectionToken('gauge defaults');\n\nexport function defaultsFactory(userDefaults: GaugeOptions): GaugeDefaults {\n  const defaults: GaugeDefaults = new GaugeDefaults();\n  Object.assign(defaults, userDefaults);\n  return defaults;\n}\n\n@NgModule({\n  declarations: [\n    GaugeComponent\n  ],\n  exports: [\n    GaugeComponent\n  ]\n})\nexport class GaugeModule {\n\n  static forRoot(userDefaults: GaugeOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: GaugeModule,\n      providers: [{\n        provide: USER_DEFAULTS,\n        useValue: userDefaults\n      }, {\n        provide: GaugeDefaults,\n        useFactory: defaultsFactory,\n        deps: [USER_DEFAULTS]\n      }]\n    };\n  }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader?emitErrors=true&failOnHint=true!./src/gauge.module.ts","import { Component, ElementRef, Input, Output, EventEmitter, AfterViewInit, OnChanges, SimpleChanges } from '@angular/core';\nimport * as Gauge from 'svg-gauge';\nimport { GaugeDefaults, GaugeOptions } from './gauge-defaults.service';\n\n@Component({\n  selector: 'mwl-gauge',\n  template: ''\n})\nexport class GaugeComponent implements AfterViewInit, OnChanges, GaugeOptions {\n\n  /**\n   * The angle in degrees to start the dial\n   */\n  @Input() dialStartAngle: number;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  @Input() dialEndAngle: number;\n\n  /**\n   * The radius of the gauge\n   */\n  @Input() radius: number;\n\n  /**\n   * The maximum value for the gauge\n   */\n  @Input() max: number;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  @Input() label: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  @Input() showValue: boolean;\n\n  /**\n   * The CSS class of the gauge\n   */\n  @Input() gaugeClass: string;\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  @Input() dialClass: string;\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  @Input() valueDialClass: string;\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  @Input() valueTextClass: string;\n\n  /**\n   * The value of the gauge\n   */\n  @Input() value: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  @Input() animated: boolean;\n\n  /**\n   * Animation duration in seconds\n   */\n  @Input() animationDuration: number;\n\n  /**\n   * Called when the gauge is created\n   */\n  @Output() gaugeCreated: EventEmitter<{gauge: any}> = new EventEmitter();\n\n  private gauge: any;\n\n  constructor(private elm: ElementRef, private defaults: GaugeDefaults) {}\n\n  ngAfterViewInit(): void {\n\n    const options: GaugeOptions = {\n      dialStartAngle: this.dialStartAngle,\n      dialEndAngle: this.dialEndAngle,\n      radius: this.radius,\n      max: this.max,\n      label: this.label,\n      showValue: this.showValue,\n      gaugeClass: this.gaugeClass,\n      dialClass: this.dialClass,\n      valueDialClass: this.valueDialClass,\n      valueTextClass: this.valueTextClass,\n      value: this.value\n    };\n\n    Object.keys(this.defaults).forEach(optionKey => {\n      if (typeof options[optionKey] === 'undefined') {\n        options[optionKey] = this.defaults[optionKey];\n      }\n    });\n\n    this.gauge = Gauge(this.elm.nativeElement, options);\n\n    this.gaugeCreated.emit({gauge: this.gauge});\n\n    this.updateValue();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['value']) {\n      this.updateValue();\n    }\n  }\n\n  private updateValue(): void {\n    if (this.gauge) {\n      if (this.animated) {\n        this.gauge.setValueAnimated(this.value, this.animationDuration);\n      } else {\n        this.gauge.setValue(this.value);\n      }\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader?emitErrors=true&failOnHint=true!./src/gauge.component.ts","export * from './gauge.module';\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader?emitErrors=true&failOnHint=true!./src/index.ts","module.exports = require(\"./src/gauge\");\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/svg-gauge/index.js\n// module id = 5\n// module chunks = 0 1","/* global window, define, module */\n(function(global, factory) {\n  var Gauge = factory(global);\n  if(typeof define === \"function\" && define.amd) {\n    // AMD support\n    define(function() {return Gauge;});\n  }else if(typeof module === \"object\" && module.exports) {\n    // CommonJS support\n    module.exports = Gauge;\n  }else {\n    // We are probably running in the browser\n    global.Gauge = Gauge;\n  }\n})(typeof window === \"undefined\" ? this : window, function(global, undefined) {\n\n  var document = global.document,\n    requestAnimationFrame = (global.requestAnimationFrame ||\n        global.mozRequestAnimationFrame ||\n        global.webkitRequestAnimationFrame ||\n        global.msRequestAnimationFrame ||\n        function(cb) {\n          return setTimeout(cb, 1000 / 60);\n        });\n\n  // EXPERIMENTAL!!\n  /**\n   * Simplistic animation function for animating the gauge. That's all!\n   * Options are:\n   * {\n   *  duration: 1,    // In seconds\n   *  start: 0,       // The start value\n   *  end: 100,       // The end value\n   *  step: function, // REQUIRED! The step function that will be passed the value and does something\n   *  easing: function // The easing function. Default is easeInOutCubic\n   * }\n   */\n  function Animation(options) {\n    var duration = options.duration,\n        currentIteration = 1,\n        iterations = 60 * duration,\n        start = options.start || 0,\n        end = options.end,\n        change = end - start,\n        step = options.step,\n        easing = options.easing || function easeInOutCubic(pos) {\n          // https://github.com/danro/easing-js/blob/master/easing.js\n          if ((pos/=0.5) < 1) return 0.5*Math.pow(pos,3);\n          return 0.5 * (Math.pow((pos-2),3) + 2);\n        };\n\n    function animate() {\n      var progress = (currentIteration++) / iterations;\n      var value = change * easing(progress) + start;\n      // console.log(progress + \", \" + value);\n      step(value);\n      if(progress < 1) {\n        requestAnimationFrame(animate);\n      }\n    }\n    // start!\n    requestAnimationFrame(animate);\n  }\n\n\n\n  var Gauge = (function() {\n\n    var SVG_NS = \"http://www.w3.org/2000/svg\";\n\n    var GaugeDefaults = {\n      dialStartAngle: 135,\n      dialEndAngle: 45,\n      centerX: 500,\n      centerY: 500,\n      radius: 400\n    };\n\n    /**\n     * A utility function to create SVG dom tree\n     * @param {String} name The SVG element name\n     * @param {Object} attrs The attributes as they appear in DOM e.g. stroke-width and not strokeWidth\n     * @param {Array} children An array of children (can be created by this same function)\n     * @return The SVG element\n     */\n    function svg(name, attrs, children) {\n      var elem = document.createElementNS(SVG_NS, name);\n      for(var attrName in attrs) {\n        elem.setAttribute(attrName, attrs[attrName]);\n      }\n\n      if(children) {\n        children.forEach(function(c) {\n          elem.appendChild(c);\n        });\n      }\n      return elem;\n    }\n\n    /**\n     * Translates percentage value to angle. e.g. If gauge span angle is 180deg, then 50%\n     * will be 90deg\n     */\n    function getAngle(percentage, gaugeSpanAngle) {\n      return percentage * gaugeSpanAngle / 100;\n    }\n\n    function normalize(value, limit) {\n      var val = Number(value);\n      if(val > limit) return limit;\n      if(val < 0) return 0;\n      return val;\n    }\n\n    function getValueInPercentage(value, limit) {\n      return 100 * value / limit;\n    }\n\n    /**\n     * Gets cartesian co-ordinates for a specified radius and angle (in degrees)\n     * @param cx {Number} The center x co-oriinate\n     * @param cy {Number} The center y co-ordinate\n     * @param radius {Number} The radius of the circle\n     * @param angle {Number} The angle in degrees\n     * @return An object with x,y co-ordinates\n     */\n    function getCartesian(cx, cy, radius, angle) {\n      var rad = angle * Math.PI / 180;\n      return {\n        x: Math.round((cx + radius * Math.cos(rad)) * 1000) / 1000,\n        y: Math.round((cy + radius * Math.sin(rad)) * 1000) / 1000\n      };\n    }\n\n    // Returns start and end points for dial\n    // i.e. starts at 135deg ends at 45deg with large arc flag\n    // REMEMBER!! angle=0 starts on X axis and then increases clockwise\n    function getDialCoords(radius, startAngle, endAngle) {\n      var cx = GaugeDefaults.centerX,\n          cy = GaugeDefaults.centerY;\n      return {\n        end: getCartesian(cx, cy, radius, endAngle),\n      \tstart: getCartesian(cx, cy, radius, startAngle)\n      };\n    }\n\n    function defaultLabelRenderer(theValue) {\n      return Math.round(theValue);\n    }\n\n    /**\n     * Creates a Gauge object. This should be called without the 'new' operator. Various options\n     * can be passed for the gauge:\n     * {\n     *    dialStartAngle: The angle to start the dial. MUST be greater than dialEndAngle. Default 135deg\n     *    dialEndAngle: The angle to end the dial. Default 45deg\n     *    radius: The gauge's radius. Default 400\n     *    max: The maximum value of the gauge. Default 100\n     *    value: The starting value of the gauge. Default 0\n     *    label: The function on how to render the center label (Should return a value)\n     * }\n     * @param {Element} elem The DOM into which to render the gauge\n     * @param {Object} opts The gauge options\n     * @return a Gauge object\n     */\n    return function Gauge(elem, opts) {\n      opts = opts || {};\n      var gaugeContainer = elem,\n          limit = opts.max || 100,\n          value = normalize(opts.value || 0, limit),\n          radius = opts.radius || 400,\n          displayValue = opts.showValue === false ? false : true,\n          valueLabelRender = typeof (opts.label) === \"function\" ? opts.label : defaultLabelRenderer,\n          startAngle = typeof (opts.dialStartAngle) === \"undefined\" ? 135 : opts.dialStartAngle,\n          endAngle = typeof (opts.dialEndAngle) === \"undefined\" ? 45 : opts.dialEndAngle,\n          valueDialClass = typeof (opts.valueDialClass) === \"undefined\" ? 'value' : opts.valueDialClass,\n          valueTextClass = typeof (opts.valueTextClass) === \"undefined\" ? 'value-text' : opts.valueTextClass,\n          dialClass = typeof (opts.dialClass) === \"undefined\" ? 'dial' : opts.dialClass,\n          gaugeClass = typeof (opts.gaugeClass) === \"undefined\" ? 'gauge' : opts.gaugeClass,\n          gaugeTextElem,\n          gaugeValuePath,\n          instance;\n\n      if(startAngle < endAngle) {\n        console.log(\"WARNING! Start angle should be greater than end angle. Swapping\");\n        var tmp = startAngle;\n        startAngle = endAngle;\n        endAngle = tmp;\n      }\n\n      function pathString(radius, startAngle, endAngle, largeArc) {\n        var coords = getDialCoords(radius, startAngle, endAngle),\n            start = coords.start,\n            end = coords.end,\n            largeArcFlag = typeof(largeArc) === \"undefined\" ? 1 : largeArc;\n\n        return [\"M\", start.x, start.y, \"A\", radius, radius, \"0\", largeArcFlag, \"1\", end.x, end.y].join(\" \");\n      }\n\n      function initializeGauge(elem) {\n        gaugeTextElem = svg(\"text\", {\n          \"class\": valueTextClass,\n          \"x\": 500,\n          \"y\": 550,\n          \"font-size\": \"700%\",\n          \"font-family\": \"sans-serif\",\n          \"font-weight\": \"bold\",\n          \"text-anchor\": \"middle\"\n        });\n        gaugeValuePath = svg(\"path\", {\n          \"class\": valueDialClass,\n          \"fill\": \"transparent\",\n          \"stroke\": \"#666\",\n          \"stroke-width\": 25,\n          \"d\": pathString(radius, startAngle, startAngle) // value of 0\n        });\n\n        var angle = getAngle(100, 360 - Math.abs(startAngle - endAngle));\n        var flag = angle <= 180 ? 0 : 1;\n        var gaugeElement = svg(\"svg\", {\"viewBox\": \"0 0 1000 1000\", \"class\": gaugeClass},\n          [\n            svg(\"path\", {\n              \"class\": dialClass,\n              \"fill\": \"transparent\",\n              \"stroke\": \"#eee\",\n              \"stroke-width\": 20,\n              \"d\": pathString(radius, startAngle, endAngle, flag)\n            }),\n            gaugeTextElem,\n            gaugeValuePath\n          ]\n        );\n        elem.appendChild(gaugeElement);\n      }\n\n      function updateGauge(theValue) {\n        var val = getValueInPercentage(theValue, limit),\n            // angle = getAngle(val, 360 - Math.abs(endAngle - startAngle)),\n            angle = getAngle(val, 360 - Math.abs(startAngle - endAngle)),\n            // this is because we are using arc greater than 180deg\n            flag = angle <= 180 ? 0 : 1;\n        (displayValue && (gaugeTextElem.textContent = valueLabelRender.call(opts, theValue)));\n        gaugeValuePath.setAttribute(\"d\", pathString(radius, startAngle, angle + startAngle, flag));\n      }\n\n      instance = {\n        setMaxValue: function(max) {\n          limit = max;\n        },\n        setValue: function(val) {\n          value = normalize(val, limit);\n          updateGauge(value);\n        },\n        setValueAnimated: function(val, duration) {\n        \tvar oldVal = value;\n          value = normalize(val, limit);\n          if(oldVal === value) {\n            return;\n          }\n          Animation({\n            start: oldVal || 0,\n            end: value,\n            duration: duration || 1,\n            step: function(val) {\n              updateGauge(Math.round(val * 100) / 100);\n            }\n          });\n        },\n        getValue: function() {\n          return value;\n        }\n      };\n\n      initializeGauge(gaugeContainer);\n      updateGauge(value);\n      return instance;\n    };\n  })();\n\n  return Gauge;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/svg-gauge/src/gauge.js\n// module id = 6\n// module chunks = 0 1"],"sourceRoot":""}