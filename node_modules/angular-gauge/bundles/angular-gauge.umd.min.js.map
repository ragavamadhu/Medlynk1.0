{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///angular-gauge.umd.min.js","webpack:///webpack/bootstrap aa4ccddeebd3b5aabd29?c86d","webpack:///./src/gauge-defaults.service.ts?4249","webpack:///external {\"root\":[\"ng\",\"core\"],\"commonjs\":\"@angular/core\",\"commonjs2\":\"@angular/core\",\"amd\":\"@angular/core\"}?ad34","webpack:///./src/gauge.module.ts?a468","webpack:///./src/gauge.component.ts?2245","webpack:///./src/index.ts?08e1","webpack:///./~/svg-gauge/index.js?0925","webpack:///./~/svg-gauge/src/gauge.js?efbd"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_1__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","GaugeDefaults","dialStartAngle","dialEndAngle","radius","max","showValue","gaugeClass","dialClass","valueDialClass","valueTextClass","animated","defaultsFactory","userDefaults","defaults","gauge_defaults_service_1","assign","__decorate","decorators","target","key","desc","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","core_1","gauge_component_1","USER_DEFAULTS","InjectionToken","GaugeModule","GaugeModule_1","forRoot","ngModule","providers","provide","useValue","useFactory","deps","NgModule","declarations","GaugeComponent","__metadata","k","v","metadata","Gauge","elm","gaugeCreated","EventEmitter","ngAfterViewInit","_this","options","label","keys","forEach","optionKey","gauge","nativeElement","emit","updateValue","ngOnChanges","changes","setValueAnimated","animationDuration","setValue","Input","Number","Function","Boolean","String","Output","Component","selector","template","ElementRef","__WEBPACK_AMD_DEFINE_RESULT__","global","undefined","Animation","animate","progress","currentIteration","iterations","step","change","easing","start","requestAnimationFrame","duration","end","pos","Math","pow","document","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame","cb","setTimeout","svg","attrs","children","elem","createElementNS","SVG_NS","attrName","setAttribute","appendChild","getAngle","percentage","gaugeSpanAngle","normalize","limit","val","getValueInPercentage","getCartesian","cx","cy","angle","rad","PI","x","round","cos","y","sin","getDialCoords","startAngle","endAngle","centerX","centerY","defaultLabelRenderer","theValue","opts","pathString","largeArc","coords","largeArcFlag","join","updateGauge","abs","flag","displayValue","gaugeTextElem","textContent","valueLabelRender","gaugeValuePath","instance","gaugeContainer","console","log","tmp","setMaxValue","oldVal","getValue","class","font-size","font-family","font-weight","text-anchor","fill","stroke","stroke-width","gaugeElement","viewBox","window"],"mappings":"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","file":"angular-gauge.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@angular/core\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angularGauge\"] = factory(require(\"@angular/core\"));\n\telse\n\t\troot[\"angularGauge\"] = factory(root[\"ng\"][\"core\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@angular/core\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angularGauge\"] = factory(require(\"@angular/core\"));\n\telse\n\t\troot[\"angularGauge\"] = factory(root[\"ng\"][\"core\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 4);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar GaugeDefaults = (function () {\r\n    function GaugeDefaults() {\r\n        /**\r\n         * The angle in degrees to start the dial\r\n         */\r\n        this.dialStartAngle = 135;\r\n        /**\r\n         * The angle in degrees to end the dial. This MUST be less than dialStartAngle\r\n         */\r\n        this.dialEndAngle = 45;\r\n        /**\r\n         * The radius of the gauge\r\n         */\r\n        this.radius = 400;\r\n        /**\r\n         * The maximum value for the gauge\r\n         */\r\n        this.max = 100;\r\n        /**\r\n         * Whether to show the value at the center of the gauge\r\n         */\r\n        this.showValue = true;\r\n        /**\r\n         * The CSS class of the gauge\r\n         */\r\n        this.gaugeClass = 'gauge';\r\n        /**\r\n         * The CSS class of the gauge's dial\r\n         */\r\n        this.dialClass = 'dial';\r\n        /**\r\n         * The CSS class of the gauge's fill (value dial)\r\n         */\r\n        this.valueDialClass = 'value';\r\n        /**\r\n         * \tThe CSS class of the gauge's text\r\n         */\r\n        this.valueTextClass = 'value-text';\r\n        /**\r\n         * Whether to animate changing the gauge\r\n         */\r\n        this.animated = false;\r\n    }\r\n    return GaugeDefaults;\r\n}());\r\nexports.GaugeDefaults = GaugeDefaults;\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = __webpack_require__(1);\r\nvar gauge_component_1 = __webpack_require__(3);\r\nvar gauge_defaults_service_1 = __webpack_require__(0);\r\nexports.USER_DEFAULTS = new core_1.InjectionToken('gauge defaults');\r\nfunction defaultsFactory(userDefaults) {\r\n    var defaults = new gauge_defaults_service_1.GaugeDefaults();\r\n    Object.assign(defaults, userDefaults);\r\n    return defaults;\r\n}\r\nexports.defaultsFactory = defaultsFactory;\r\nvar GaugeModule = GaugeModule_1 = (function () {\r\n    function GaugeModule() {\r\n    }\r\n    GaugeModule.forRoot = function (userDefaults) {\r\n        if (userDefaults === void 0) { userDefaults = {}; }\r\n        return {\r\n            ngModule: GaugeModule_1,\r\n            providers: [{\r\n                    provide: exports.USER_DEFAULTS,\r\n                    useValue: userDefaults\r\n                }, {\r\n                    provide: gauge_defaults_service_1.GaugeDefaults,\r\n                    useFactory: defaultsFactory,\r\n                    deps: [exports.USER_DEFAULTS]\r\n                }]\r\n        };\r\n    };\r\n    return GaugeModule;\r\n}());\r\nGaugeModule = GaugeModule_1 = __decorate([\r\n    core_1.NgModule({\r\n        declarations: [\r\n            gauge_component_1.GaugeComponent\r\n        ],\r\n        exports: [\r\n            gauge_component_1.GaugeComponent\r\n        ]\r\n    })\r\n], GaugeModule);\r\nexports.GaugeModule = GaugeModule;\r\nvar GaugeModule_1;\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = __webpack_require__(1);\r\nvar Gauge = __webpack_require__(5);\r\nvar gauge_defaults_service_1 = __webpack_require__(0);\r\nvar GaugeComponent = (function () {\r\n    function GaugeComponent(elm, defaults) {\r\n        this.elm = elm;\r\n        this.defaults = defaults;\r\n        /**\r\n         * Called when the gauge is created\r\n         */\r\n        this.gaugeCreated = new core_1.EventEmitter();\r\n    }\r\n    GaugeComponent.prototype.ngAfterViewInit = function () {\r\n        var _this = this;\r\n        var options = {\r\n            dialStartAngle: this.dialStartAngle,\r\n            dialEndAngle: this.dialEndAngle,\r\n            radius: this.radius,\r\n            max: this.max,\r\n            label: this.label,\r\n            showValue: this.showValue,\r\n            gaugeClass: this.gaugeClass,\r\n            dialClass: this.dialClass,\r\n            valueDialClass: this.valueDialClass,\r\n            valueTextClass: this.valueTextClass,\r\n            value: this.value\r\n        };\r\n        Object.keys(this.defaults).forEach(function (optionKey) {\r\n            if (typeof options[optionKey] === 'undefined') {\r\n                options[optionKey] = _this.defaults[optionKey];\r\n            }\r\n        });\r\n        this.gauge = Gauge(this.elm.nativeElement, options);\r\n        this.gaugeCreated.emit({ gauge: this.gauge });\r\n        this.updateValue();\r\n    };\r\n    GaugeComponent.prototype.ngOnChanges = function (changes) {\r\n        if (changes['value']) {\r\n            this.updateValue();\r\n        }\r\n    };\r\n    GaugeComponent.prototype.updateValue = function () {\r\n        if (this.gauge) {\r\n            if (this.animated) {\r\n                this.gauge.setValueAnimated(this.value, this.animationDuration);\r\n            }\r\n            else {\r\n                this.gauge.setValue(this.value);\r\n            }\r\n        }\r\n    };\r\n    return GaugeComponent;\r\n}());\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", Number)\r\n], GaugeComponent.prototype, \"dialStartAngle\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", Number)\r\n], GaugeComponent.prototype, \"dialEndAngle\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", Number)\r\n], GaugeComponent.prototype, \"radius\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", Number)\r\n], GaugeComponent.prototype, \"max\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", Function)\r\n], GaugeComponent.prototype, \"label\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], GaugeComponent.prototype, \"showValue\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", String)\r\n], GaugeComponent.prototype, \"gaugeClass\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", String)\r\n], GaugeComponent.prototype, \"dialClass\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", String)\r\n], GaugeComponent.prototype, \"valueDialClass\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", String)\r\n], GaugeComponent.prototype, \"valueTextClass\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", Number)\r\n], GaugeComponent.prototype, \"value\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], GaugeComponent.prototype, \"animated\", void 0);\r\n__decorate([\r\n    core_1.Input(),\r\n    __metadata(\"design:type\", Number)\r\n], GaugeComponent.prototype, \"animationDuration\", void 0);\r\n__decorate([\r\n    core_1.Output(),\r\n    __metadata(\"design:type\", core_1.EventEmitter)\r\n], GaugeComponent.prototype, \"gaugeCreated\", void 0);\r\nGaugeComponent = __decorate([\r\n    core_1.Component({\r\n        selector: 'mwl-gauge',\r\n        template: ''\r\n    }),\r\n    __metadata(\"design:paramtypes\", [core_1.ElementRef, gauge_defaults_service_1.GaugeDefaults])\r\n], GaugeComponent);\r\nexports.GaugeComponent = GaugeComponent;\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(2));\r\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(6);\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;/* global window, define, module */\n(function(global, factory) {\n  var Gauge = factory(global);\n  if(true) {\n    // AMD support\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {return Gauge;}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }else if(typeof module === \"object\" && module.exports) {\n    // CommonJS support\n    module.exports = Gauge;\n  }else {\n    // We are probably running in the browser\n    global.Gauge = Gauge;\n  }\n})(typeof window === \"undefined\" ? this : window, function(global, undefined) {\n\n  var document = global.document,\n    requestAnimationFrame = (global.requestAnimationFrame ||\n        global.mozRequestAnimationFrame ||\n        global.webkitRequestAnimationFrame ||\n        global.msRequestAnimationFrame ||\n        function(cb) {\n          return setTimeout(cb, 1000 / 60);\n        });\n\n  // EXPERIMENTAL!!\n  /**\n   * Simplistic animation function for animating the gauge. That's all!\n   * Options are:\n   * {\n   *  duration: 1,    // In seconds\n   *  start: 0,       // The start value\n   *  end: 100,       // The end value\n   *  step: function, // REQUIRED! The step function that will be passed the value and does something\n   *  easing: function // The easing function. Default is easeInOutCubic\n   * }\n   */\n  function Animation(options) {\n    var duration = options.duration,\n        currentIteration = 1,\n        iterations = 60 * duration,\n        start = options.start || 0,\n        end = options.end,\n        change = end - start,\n        step = options.step,\n        easing = options.easing || function easeInOutCubic(pos) {\n          // https://github.com/danro/easing-js/blob/master/easing.js\n          if ((pos/=0.5) < 1) return 0.5*Math.pow(pos,3);\n          return 0.5 * (Math.pow((pos-2),3) + 2);\n        };\n\n    function animate() {\n      var progress = (currentIteration++) / iterations;\n      var value = change * easing(progress) + start;\n      // console.log(progress + \", \" + value);\n      step(value);\n      if(progress < 1) {\n        requestAnimationFrame(animate);\n      }\n    }\n    // start!\n    requestAnimationFrame(animate);\n  }\n\n\n\n  var Gauge = (function() {\n\n    var SVG_NS = \"http://www.w3.org/2000/svg\";\n\n    var GaugeDefaults = {\n      dialStartAngle: 135,\n      dialEndAngle: 45,\n      centerX: 500,\n      centerY: 500,\n      radius: 400\n    };\n\n    /**\n     * A utility function to create SVG dom tree\n     * @param {String} name The SVG element name\n     * @param {Object} attrs The attributes as they appear in DOM e.g. stroke-width and not strokeWidth\n     * @param {Array} children An array of children (can be created by this same function)\n     * @return The SVG element\n     */\n    function svg(name, attrs, children) {\n      var elem = document.createElementNS(SVG_NS, name);\n      for(var attrName in attrs) {\n        elem.setAttribute(attrName, attrs[attrName]);\n      }\n\n      if(children) {\n        children.forEach(function(c) {\n          elem.appendChild(c);\n        });\n      }\n      return elem;\n    }\n\n    /**\n     * Translates percentage value to angle. e.g. If gauge span angle is 180deg, then 50%\n     * will be 90deg\n     */\n    function getAngle(percentage, gaugeSpanAngle) {\n      return percentage * gaugeSpanAngle / 100;\n    }\n\n    function normalize(value, limit) {\n      var val = Number(value);\n      if(val > limit) return limit;\n      if(val < 0) return 0;\n      return val;\n    }\n\n    function getValueInPercentage(value, limit) {\n      return 100 * value / limit;\n    }\n\n    /**\n     * Gets cartesian co-ordinates for a specified radius and angle (in degrees)\n     * @param cx {Number} The center x co-oriinate\n     * @param cy {Number} The center y co-ordinate\n     * @param radius {Number} The radius of the circle\n     * @param angle {Number} The angle in degrees\n     * @return An object with x,y co-ordinates\n     */\n    function getCartesian(cx, cy, radius, angle) {\n      var rad = angle * Math.PI / 180;\n      return {\n        x: Math.round((cx + radius * Math.cos(rad)) * 1000) / 1000,\n        y: Math.round((cy + radius * Math.sin(rad)) * 1000) / 1000\n      };\n    }\n\n    // Returns start and end points for dial\n    // i.e. starts at 135deg ends at 45deg with large arc flag\n    // REMEMBER!! angle=0 starts on X axis and then increases clockwise\n    function getDialCoords(radius, startAngle, endAngle) {\n      var cx = GaugeDefaults.centerX,\n          cy = GaugeDefaults.centerY;\n      return {\n        end: getCartesian(cx, cy, radius, endAngle),\n      \tstart: getCartesian(cx, cy, radius, startAngle)\n      };\n    }\n\n    function defaultLabelRenderer(theValue) {\n      return Math.round(theValue);\n    }\n\n    /**\n     * Creates a Gauge object. This should be called without the 'new' operator. Various options\n     * can be passed for the gauge:\n     * {\n     *    dialStartAngle: The angle to start the dial. MUST be greater than dialEndAngle. Default 135deg\n     *    dialEndAngle: The angle to end the dial. Default 45deg\n     *    radius: The gauge's radius. Default 400\n     *    max: The maximum value of the gauge. Default 100\n     *    value: The starting value of the gauge. Default 0\n     *    label: The function on how to render the center label (Should return a value)\n     * }\n     * @param {Element} elem The DOM into which to render the gauge\n     * @param {Object} opts The gauge options\n     * @return a Gauge object\n     */\n    return function Gauge(elem, opts) {\n      opts = opts || {};\n      var gaugeContainer = elem,\n          limit = opts.max || 100,\n          value = normalize(opts.value || 0, limit),\n          radius = opts.radius || 400,\n          displayValue = opts.showValue === false ? false : true,\n          valueLabelRender = typeof (opts.label) === \"function\" ? opts.label : defaultLabelRenderer,\n          startAngle = typeof (opts.dialStartAngle) === \"undefined\" ? 135 : opts.dialStartAngle,\n          endAngle = typeof (opts.dialEndAngle) === \"undefined\" ? 45 : opts.dialEndAngle,\n          valueDialClass = typeof (opts.valueDialClass) === \"undefined\" ? 'value' : opts.valueDialClass,\n          valueTextClass = typeof (opts.valueTextClass) === \"undefined\" ? 'value-text' : opts.valueTextClass,\n          dialClass = typeof (opts.dialClass) === \"undefined\" ? 'dial' : opts.dialClass,\n          gaugeClass = typeof (opts.gaugeClass) === \"undefined\" ? 'gauge' : opts.gaugeClass,\n          gaugeTextElem,\n          gaugeValuePath,\n          instance;\n\n      if(startAngle < endAngle) {\n        console.log(\"WARNING! Start angle should be greater than end angle. Swapping\");\n        var tmp = startAngle;\n        startAngle = endAngle;\n        endAngle = tmp;\n      }\n\n      function pathString(radius, startAngle, endAngle, largeArc) {\n        var coords = getDialCoords(radius, startAngle, endAngle),\n            start = coords.start,\n            end = coords.end,\n            largeArcFlag = typeof(largeArc) === \"undefined\" ? 1 : largeArc;\n\n        return [\"M\", start.x, start.y, \"A\", radius, radius, \"0\", largeArcFlag, \"1\", end.x, end.y].join(\" \");\n      }\n\n      function initializeGauge(elem) {\n        gaugeTextElem = svg(\"text\", {\n          \"class\": valueTextClass,\n          \"x\": 500,\n          \"y\": 550,\n          \"font-size\": \"700%\",\n          \"font-family\": \"sans-serif\",\n          \"font-weight\": \"bold\",\n          \"text-anchor\": \"middle\"\n        });\n        gaugeValuePath = svg(\"path\", {\n          \"class\": valueDialClass,\n          \"fill\": \"transparent\",\n          \"stroke\": \"#666\",\n          \"stroke-width\": 25,\n          \"d\": pathString(radius, startAngle, startAngle) // value of 0\n        });\n\n        var angle = getAngle(100, 360 - Math.abs(startAngle - endAngle));\n        var flag = angle <= 180 ? 0 : 1;\n        var gaugeElement = svg(\"svg\", {\"viewBox\": \"0 0 1000 1000\", \"class\": gaugeClass},\n          [\n            svg(\"path\", {\n              \"class\": dialClass,\n              \"fill\": \"transparent\",\n              \"stroke\": \"#eee\",\n              \"stroke-width\": 20,\n              \"d\": pathString(radius, startAngle, endAngle, flag)\n            }),\n            gaugeTextElem,\n            gaugeValuePath\n          ]\n        );\n        elem.appendChild(gaugeElement);\n      }\n\n      function updateGauge(theValue) {\n        var val = getValueInPercentage(theValue, limit),\n            // angle = getAngle(val, 360 - Math.abs(endAngle - startAngle)),\n            angle = getAngle(val, 360 - Math.abs(startAngle - endAngle)),\n            // this is because we are using arc greater than 180deg\n            flag = angle <= 180 ? 0 : 1;\n        (displayValue && (gaugeTextElem.textContent = valueLabelRender.call(opts, theValue)));\n        gaugeValuePath.setAttribute(\"d\", pathString(radius, startAngle, angle + startAngle, flag));\n      }\n\n      instance = {\n        setMaxValue: function(max) {\n          limit = max;\n        },\n        setValue: function(val) {\n          value = normalize(val, limit);\n          updateGauge(value);\n        },\n        setValueAnimated: function(val, duration) {\n        \tvar oldVal = value;\n          value = normalize(val, limit);\n          if(oldVal === value) {\n            return;\n          }\n          Animation({\n            start: oldVal || 0,\n            end: value,\n            duration: duration || 1,\n            step: function(val) {\n              updateGauge(Math.round(val * 100) / 100);\n            }\n          });\n        },\n        getValue: function() {\n          return value;\n        }\n      };\n\n      initializeGauge(gaugeContainer);\n      updateGauge(value);\n      return instance;\n    };\n  })();\n\n  return Gauge;\n});\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// angular-gauge.umd.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap aa4ccddeebd3b5aabd29","export interface GaugeOptions {\n\n  /**\n   * The angle in degrees to start the dial\n   */\n  dialStartAngle?: number;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  dialEndAngle?: number;\n\n  /**\n   * The radius of the gauge\n   */\n  radius?: number;\n\n  /**\n   * The maximum value for the gauge\n   */\n  max?: number;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  label?: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  showValue?: boolean;\n\n  /**\n   * The CSS class of the gauge\n   */\n  gaugeClass?: string;\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  dialClass?: string;\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  valueDialClass?: string;\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  valueTextClass?: string;\n\n  /**\n   * The value of the gauge\n   */\n  value?: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  animated?: boolean;\n\n  /**\n   * Animation duration in seconds\n   */\n  animationDuration?: number;\n\n}\n\nexport class GaugeDefaults implements GaugeOptions {\n\n  /**\n   * The angle in degrees to start the dial\n   */\n  dialStartAngle: number = 135;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  dialEndAngle: number = 45;\n\n  /**\n   * The radius of the gauge\n   */\n  radius: number = 400;\n\n  /**\n   * The maximum value for the gauge\n   */\n  max: number = 100;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  label: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  showValue: boolean = true;\n\n  /**\n   * The CSS class of the gauge\n   */\n  gaugeClass: string = 'gauge';\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  dialClass: string = 'dial';\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  valueDialClass: string = 'value';\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  valueTextClass: string = 'value-text';\n\n  /**\n   * The value of the gauge\n   */\n  value: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  animated: boolean = false;\n\n  /**\n   * Animation duration in seconds\n   */\n  animationDuration: number;\n\n}\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader?emitErrors=true&failOnHint=true!./src/gauge-defaults.service.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":[\"ng\",\"core\"],\"commonjs\":\"@angular/core\",\"commonjs2\":\"@angular/core\",\"amd\":\"@angular/core\"}\n// module id = 1\n// module chunks = 0 1","import { NgModule, InjectionToken, ModuleWithProviders } from '@angular/core';\nimport { GaugeComponent } from './gauge.component';\nimport { GaugeDefaults, GaugeOptions } from './gauge-defaults.service';\n\nexport const USER_DEFAULTS: InjectionToken<string> = new InjectionToken('gauge defaults');\n\nexport function defaultsFactory(userDefaults: GaugeOptions): GaugeDefaults {\n  const defaults: GaugeDefaults = new GaugeDefaults();\n  Object.assign(defaults, userDefaults);\n  return defaults;\n}\n\n@NgModule({\n  declarations: [\n    GaugeComponent\n  ],\n  exports: [\n    GaugeComponent\n  ]\n})\nexport class GaugeModule {\n\n  static forRoot(userDefaults: GaugeOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: GaugeModule,\n      providers: [{\n        provide: USER_DEFAULTS,\n        useValue: userDefaults\n      }, {\n        provide: GaugeDefaults,\n        useFactory: defaultsFactory,\n        deps: [USER_DEFAULTS]\n      }]\n    };\n  }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader?emitErrors=true&failOnHint=true!./src/gauge.module.ts","import { Component, ElementRef, Input, Output, EventEmitter, AfterViewInit, OnChanges, SimpleChanges } from '@angular/core';\nimport * as Gauge from 'svg-gauge';\nimport { GaugeDefaults, GaugeOptions } from './gauge-defaults.service';\n\n@Component({\n  selector: 'mwl-gauge',\n  template: ''\n})\nexport class GaugeComponent implements AfterViewInit, OnChanges, GaugeOptions {\n\n  /**\n   * The angle in degrees to start the dial\n   */\n  @Input() dialStartAngle: number;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  @Input() dialEndAngle: number;\n\n  /**\n   * The radius of the gauge\n   */\n  @Input() radius: number;\n\n  /**\n   * The maximum value for the gauge\n   */\n  @Input() max: number;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  @Input() label: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  @Input() showValue: boolean;\n\n  /**\n   * The CSS class of the gauge\n   */\n  @Input() gaugeClass: string;\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  @Input() dialClass: string;\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  @Input() valueDialClass: string;\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  @Input() valueTextClass: string;\n\n  /**\n   * The value of the gauge\n   */\n  @Input() value: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  @Input() animated: boolean;\n\n  /**\n   * Animation duration in seconds\n   */\n  @Input() animationDuration: number;\n\n  /**\n   * Called when the gauge is created\n   */\n  @Output() gaugeCreated: EventEmitter<{gauge: any}> = new EventEmitter();\n\n  private gauge: any;\n\n  constructor(private elm: ElementRef, private defaults: GaugeDefaults) {}\n\n  ngAfterViewInit(): void {\n\n    const options: GaugeOptions = {\n      dialStartAngle: this.dialStartAngle,\n      dialEndAngle: this.dialEndAngle,\n      radius: this.radius,\n      max: this.max,\n      label: this.label,\n      showValue: this.showValue,\n      gaugeClass: this.gaugeClass,\n      dialClass: this.dialClass,\n      valueDialClass: this.valueDialClass,\n      valueTextClass: this.valueTextClass,\n      value: this.value\n    };\n\n    Object.keys(this.defaults).forEach(optionKey => {\n      if (typeof options[optionKey] === 'undefined') {\n        options[optionKey] = this.defaults[optionKey];\n      }\n    });\n\n    this.gauge = Gauge(this.elm.nativeElement, options);\n\n    this.gaugeCreated.emit({gauge: this.gauge});\n\n    this.updateValue();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['value']) {\n      this.updateValue();\n    }\n  }\n\n  private updateValue(): void {\n    if (this.gauge) {\n      if (this.animated) {\n        this.gauge.setValueAnimated(this.value, this.animationDuration);\n      } else {\n        this.gauge.setValue(this.value);\n      }\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader?emitErrors=true&failOnHint=true!./src/gauge.component.ts","export * from './gauge.module';\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader?emitErrors=true&failOnHint=true!./src/index.ts","module.exports = require(\"./src/gauge\");\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/svg-gauge/index.js\n// module id = 5\n// module chunks = 0 1","/* global window, define, module */\n(function(global, factory) {\n  var Gauge = factory(global);\n  if(typeof define === \"function\" && define.amd) {\n    // AMD support\n    define(function() {return Gauge;});\n  }else if(typeof module === \"object\" && module.exports) {\n    // CommonJS support\n    module.exports = Gauge;\n  }else {\n    // We are probably running in the browser\n    global.Gauge = Gauge;\n  }\n})(typeof window === \"undefined\" ? this : window, function(global, undefined) {\n\n  var document = global.document,\n    requestAnimationFrame = (global.requestAnimationFrame ||\n        global.mozRequestAnimationFrame ||\n        global.webkitRequestAnimationFrame ||\n        global.msRequestAnimationFrame ||\n        function(cb) {\n          return setTimeout(cb, 1000 / 60);\n        });\n\n  // EXPERIMENTAL!!\n  /**\n   * Simplistic animation function for animating the gauge. That's all!\n   * Options are:\n   * {\n   *  duration: 1,    // In seconds\n   *  start: 0,       // The start value\n   *  end: 100,       // The end value\n   *  step: function, // REQUIRED! The step function that will be passed the value and does something\n   *  easing: function // The easing function. Default is easeInOutCubic\n   * }\n   */\n  function Animation(options) {\n    var duration = options.duration,\n        currentIteration = 1,\n        iterations = 60 * duration,\n        start = options.start || 0,\n        end = options.end,\n        change = end - start,\n        step = options.step,\n        easing = options.easing || function easeInOutCubic(pos) {\n          // https://github.com/danro/easing-js/blob/master/easing.js\n          if ((pos/=0.5) < 1) return 0.5*Math.pow(pos,3);\n          return 0.5 * (Math.pow((pos-2),3) + 2);\n        };\n\n    function animate() {\n      var progress = (currentIteration++) / iterations;\n      var value = change * easing(progress) + start;\n      // console.log(progress + \", \" + value);\n      step(value);\n      if(progress < 1) {\n        requestAnimationFrame(animate);\n      }\n    }\n    // start!\n    requestAnimationFrame(animate);\n  }\n\n\n\n  var Gauge = (function() {\n\n    var SVG_NS = \"http://www.w3.org/2000/svg\";\n\n    var GaugeDefaults = {\n      dialStartAngle: 135,\n      dialEndAngle: 45,\n      centerX: 500,\n      centerY: 500,\n      radius: 400\n    };\n\n    /**\n     * A utility function to create SVG dom tree\n     * @param {String} name The SVG element name\n     * @param {Object} attrs The attributes as they appear in DOM e.g. stroke-width and not strokeWidth\n     * @param {Array} children An array of children (can be created by this same function)\n     * @return The SVG element\n     */\n    function svg(name, attrs, children) {\n      var elem = document.createElementNS(SVG_NS, name);\n      for(var attrName in attrs) {\n        elem.setAttribute(attrName, attrs[attrName]);\n      }\n\n      if(children) {\n        children.forEach(function(c) {\n          elem.appendChild(c);\n        });\n      }\n      return elem;\n    }\n\n    /**\n     * Translates percentage value to angle. e.g. If gauge span angle is 180deg, then 50%\n     * will be 90deg\n     */\n    function getAngle(percentage, gaugeSpanAngle) {\n      return percentage * gaugeSpanAngle / 100;\n    }\n\n    function normalize(value, limit) {\n      var val = Number(value);\n      if(val > limit) return limit;\n      if(val < 0) return 0;\n      return val;\n    }\n\n    function getValueInPercentage(value, limit) {\n      return 100 * value / limit;\n    }\n\n    /**\n     * Gets cartesian co-ordinates for a specified radius and angle (in degrees)\n     * @param cx {Number} The center x co-oriinate\n     * @param cy {Number} The center y co-ordinate\n     * @param radius {Number} The radius of the circle\n     * @param angle {Number} The angle in degrees\n     * @return An object with x,y co-ordinates\n     */\n    function getCartesian(cx, cy, radius, angle) {\n      var rad = angle * Math.PI / 180;\n      return {\n        x: Math.round((cx + radius * Math.cos(rad)) * 1000) / 1000,\n        y: Math.round((cy + radius * Math.sin(rad)) * 1000) / 1000\n      };\n    }\n\n    // Returns start and end points for dial\n    // i.e. starts at 135deg ends at 45deg with large arc flag\n    // REMEMBER!! angle=0 starts on X axis and then increases clockwise\n    function getDialCoords(radius, startAngle, endAngle) {\n      var cx = GaugeDefaults.centerX,\n          cy = GaugeDefaults.centerY;\n      return {\n        end: getCartesian(cx, cy, radius, endAngle),\n      \tstart: getCartesian(cx, cy, radius, startAngle)\n      };\n    }\n\n    function defaultLabelRenderer(theValue) {\n      return Math.round(theValue);\n    }\n\n    /**\n     * Creates a Gauge object. This should be called without the 'new' operator. Various options\n     * can be passed for the gauge:\n     * {\n     *    dialStartAngle: The angle to start the dial. MUST be greater than dialEndAngle. Default 135deg\n     *    dialEndAngle: The angle to end the dial. Default 45deg\n     *    radius: The gauge's radius. Default 400\n     *    max: The maximum value of the gauge. Default 100\n     *    value: The starting value of the gauge. Default 0\n     *    label: The function on how to render the center label (Should return a value)\n     * }\n     * @param {Element} elem The DOM into which to render the gauge\n     * @param {Object} opts The gauge options\n     * @return a Gauge object\n     */\n    return function Gauge(elem, opts) {\n      opts = opts || {};\n      var gaugeContainer = elem,\n          limit = opts.max || 100,\n          value = normalize(opts.value || 0, limit),\n          radius = opts.radius || 400,\n          displayValue = opts.showValue === false ? false : true,\n          valueLabelRender = typeof (opts.label) === \"function\" ? opts.label : defaultLabelRenderer,\n          startAngle = typeof (opts.dialStartAngle) === \"undefined\" ? 135 : opts.dialStartAngle,\n          endAngle = typeof (opts.dialEndAngle) === \"undefined\" ? 45 : opts.dialEndAngle,\n          valueDialClass = typeof (opts.valueDialClass) === \"undefined\" ? 'value' : opts.valueDialClass,\n          valueTextClass = typeof (opts.valueTextClass) === \"undefined\" ? 'value-text' : opts.valueTextClass,\n          dialClass = typeof (opts.dialClass) === \"undefined\" ? 'dial' : opts.dialClass,\n          gaugeClass = typeof (opts.gaugeClass) === \"undefined\" ? 'gauge' : opts.gaugeClass,\n          gaugeTextElem,\n          gaugeValuePath,\n          instance;\n\n      if(startAngle < endAngle) {\n        console.log(\"WARNING! Start angle should be greater than end angle. Swapping\");\n        var tmp = startAngle;\n        startAngle = endAngle;\n        endAngle = tmp;\n      }\n\n      function pathString(radius, startAngle, endAngle, largeArc) {\n        var coords = getDialCoords(radius, startAngle, endAngle),\n            start = coords.start,\n            end = coords.end,\n            largeArcFlag = typeof(largeArc) === \"undefined\" ? 1 : largeArc;\n\n        return [\"M\", start.x, start.y, \"A\", radius, radius, \"0\", largeArcFlag, \"1\", end.x, end.y].join(\" \");\n      }\n\n      function initializeGauge(elem) {\n        gaugeTextElem = svg(\"text\", {\n          \"class\": valueTextClass,\n          \"x\": 500,\n          \"y\": 550,\n          \"font-size\": \"700%\",\n          \"font-family\": \"sans-serif\",\n          \"font-weight\": \"bold\",\n          \"text-anchor\": \"middle\"\n        });\n        gaugeValuePath = svg(\"path\", {\n          \"class\": valueDialClass,\n          \"fill\": \"transparent\",\n          \"stroke\": \"#666\",\n          \"stroke-width\": 25,\n          \"d\": pathString(radius, startAngle, startAngle) // value of 0\n        });\n\n        var angle = getAngle(100, 360 - Math.abs(startAngle - endAngle));\n        var flag = angle <= 180 ? 0 : 1;\n        var gaugeElement = svg(\"svg\", {\"viewBox\": \"0 0 1000 1000\", \"class\": gaugeClass},\n          [\n            svg(\"path\", {\n              \"class\": dialClass,\n              \"fill\": \"transparent\",\n              \"stroke\": \"#eee\",\n              \"stroke-width\": 20,\n              \"d\": pathString(radius, startAngle, endAngle, flag)\n            }),\n            gaugeTextElem,\n            gaugeValuePath\n          ]\n        );\n        elem.appendChild(gaugeElement);\n      }\n\n      function updateGauge(theValue) {\n        var val = getValueInPercentage(theValue, limit),\n            // angle = getAngle(val, 360 - Math.abs(endAngle - startAngle)),\n            angle = getAngle(val, 360 - Math.abs(startAngle - endAngle)),\n            // this is because we are using arc greater than 180deg\n            flag = angle <= 180 ? 0 : 1;\n        (displayValue && (gaugeTextElem.textContent = valueLabelRender.call(opts, theValue)));\n        gaugeValuePath.setAttribute(\"d\", pathString(radius, startAngle, angle + startAngle, flag));\n      }\n\n      instance = {\n        setMaxValue: function(max) {\n          limit = max;\n        },\n        setValue: function(val) {\n          value = normalize(val, limit);\n          updateGauge(value);\n        },\n        setValueAnimated: function(val, duration) {\n        \tvar oldVal = value;\n          value = normalize(val, limit);\n          if(oldVal === value) {\n            return;\n          }\n          Animation({\n            start: oldVal || 0,\n            end: value,\n            duration: duration || 1,\n            step: function(val) {\n              updateGauge(Math.round(val * 100) / 100);\n            }\n          });\n        },\n        getValue: function() {\n          return value;\n        }\n      };\n\n      initializeGauge(gaugeContainer);\n      updateGauge(value);\n      return instance;\n    };\n  })();\n\n  return Gauge;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/svg-gauge/src/gauge.js\n// module id = 6\n// module chunks = 0 1"],"sourceRoot":""}